<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibTessDotNet</name>
    </assembly>
    <members>
        <member name="M:LibTessDotNet.Geom.EdgeEval(LibTessDotNet.MeshUtils.Vertex,LibTessDotNet.MeshUtils.Vertex,LibTessDotNet.MeshUtils.Vertex)">
            <summary>
            Given three vertices u,v,w such that VertLeq(u,v) and VertLeq(v,w),
            evaluates the t-coord of the edge uw at the s-coord of the vertex v.
            Returns v->t - (uw)(v->s), ie. the signed distance from uw to v.
            If uw is vertical (and thus passes through v), the result is zero.
            
            The calculation is extremely accurate and stable, even when v
            is very close to u or w.  In particular if we set v->t = 0 and
            let r be the negated result (this evaluates (uw)(v->s)), then
            r is guaranteed to satisfy MIN(u->t,w->t) less than or equal r less than or equal MAX(u->t,w->t).
            </summary>
        </member>
        <member name="M:LibTessDotNet.Geom.EdgeSign(LibTessDotNet.MeshUtils.Vertex,LibTessDotNet.MeshUtils.Vertex,LibTessDotNet.MeshUtils.Vertex)">
            <summary>
            Returns a number whose sign matches EdgeEval(u,v,w) but which
            is cheaper to evaluate. Returns > 0, == 0 , or less than 0
            as v is above, on, or below the edge uw.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Geom.EdgeIntersect(LibTessDotNet.MeshUtils.Vertex,LibTessDotNet.MeshUtils.Vertex,LibTessDotNet.MeshUtils.Vertex,LibTessDotNet.MeshUtils.Vertex,LibTessDotNet.MeshUtils.Vertex)">
            <summary>
            Given edges (o1,d1) and (o2,d2), compute their point of intersection.
            The computed point is guaranteed to lie in the intersection of the
            bounding rectangles defined by each edge.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Mesh.MakeEdge(LibTessDotNet.IPool)">
            <summary>
            Creates one edge, two vertices and a loop (face).
            The loop consists of the two new half-edges.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Mesh.Splice(LibTessDotNet.IPool,LibTessDotNet.MeshUtils.Edge,LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Splice is the basic operation for changing the
            mesh connectivity and topology.  It changes the mesh so that
                eOrg->Onext = OLD( eDst->Onext )
                eDst->Onext = OLD( eOrg->Onext )
            where OLD(...) means the value before the meshSplice operation.
            
            This can have two effects on the vertex structure:
             - if eOrg->Org != eDst->Org, the two vertices are merged together
             - if eOrg->Org == eDst->Org, the origin is split into two vertices
            In both cases, eDst->Org is changed and eOrg->Org is untouched.
            
            Similarly (and independently) for the face structure,
             - if eOrg->Lface == eDst->Lface, one loop is split into two
             - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one
            In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.
            
            Some special cases:
            If eDst == eOrg, the operation has no effect.
            If eDst == eOrg->Lnext, the new face will have a single edge.
            If eDst == eOrg->Lprev, the old face will have a single edge.
            If eDst == eOrg->Onext, the new vertex will have a single edge.
            If eDst == eOrg->Oprev, the old vertex will have a single edge.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Mesh.Delete(LibTessDotNet.IPool,LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Removes the edge eDel. There are several cases:
            if (eDel->Lface != eDel->Rface), we join two loops into one; the loop
            eDel->Lface is deleted. Otherwise, we are splitting one loop into two;
            the newly created loop will contain eDel->Dst. If the deletion of eDel
            would create isolated vertices, those are deleted as well.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Mesh.AddEdgeVertex(LibTessDotNet.IPool,LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Creates a new edge such that eNew == eOrg.Lnext and eNew.Dst is a newly created vertex.
            eOrg and eNew will have the same left face.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Mesh.SplitEdge(LibTessDotNet.IPool,LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Splits eOrg into two edges eOrg and eNew such that eNew == eOrg.Lnext.
            The new vertex is eOrg.Dst == eNew.Org.
            eOrg and eNew will have the same left face.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Mesh.Connect(LibTessDotNet.IPool,LibTessDotNet.MeshUtils.Edge,LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Creates a new edge from eOrg->Dst to eDst->Org, and returns the corresponding half-edge eNew.
            If eOrg->Lface == eDst->Lface, this splits one loop into two,
            and the newly created loop is eNew->Lface.  Otherwise, two disjoint
            loops are merged into one, and the loop eDst->Lface is destroyed.
            
            If (eOrg == eDst), the new face will have only two edges.
            If (eOrg->Lnext == eDst), the old face is reduced to a single edge.
            If (eOrg->Lnext->Lnext == eDst), the old face is reduced to two edges.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Mesh.ZapFace(LibTessDotNet.IPool,LibTessDotNet.MeshUtils.Face)">
            <summary>
            Destroys a face and removes it from the global face list. All edges of
            fZap will have a NULL pointer as their left face. Any edges which
            also have a NULL pointer as their right face are deleted entirely
            (along with any isolated vertices this produces).
            An entire mesh can be deleted by zapping its faces, one at a time,
            in any order. Zapped faces cannot be used in further mesh operations!
            </summary>
        </member>
        <member name="M:LibTessDotNet.MeshUtils.Splice(LibTessDotNet.MeshUtils.Edge,LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Splice( a, b ) is best described by the Guibas/Stolfi paper or the
            CS348a notes (see Mesh.cs). Basically it modifies the mesh so that
            a->Onext and b->Onext are exchanged. This can have various effects
            depending on whether a and b belong to different face or vertex rings.
            For more explanation see Mesh.Splice().
            </summary>
        </member>
        <member name="M:LibTessDotNet.MeshUtils.MakeVertex(LibTessDotNet.IPool,LibTessDotNet.MeshUtils.Edge,LibTessDotNet.MeshUtils.Vertex)">
            <summary>
            MakeVertex( eOrig, vNext ) attaches a new vertex and makes it the
            origin of all edges in the vertex loop to which eOrig belongs. "vNext" gives
            a place to insert the new vertex in the global vertex list. We insert
            the new vertex *before* vNext so that algorithms which walk the vertex
            list will not see the newly created vertices.
            </summary>
        </member>
        <member name="M:LibTessDotNet.MeshUtils.MakeFace(LibTessDotNet.IPool,LibTessDotNet.MeshUtils.Edge,LibTessDotNet.MeshUtils.Face)">
            <summary>
            MakeFace( eOrig, fNext ) attaches a new face and makes it the left
            face of all edges in the face loop to which eOrig belongs. "fNext" gives
            a place to insert the new face in the global face list. We insert
            the new face *before* fNext so that algorithms which walk the face
            list will not see the newly created faces.
            </summary>
        </member>
        <member name="M:LibTessDotNet.MeshUtils.MakeEdge(LibTessDotNet.IPool,LibTessDotNet.MeshUtils.Edge)">
            <summary>
            MakeEdge creates a new pair of half-edges which form their own loop.
            No vertex or face structures are allocated, but these must be assigned
            before the current edge operation is completed.
            </summary>
        </member>
        <member name="M:LibTessDotNet.MeshUtils.KillEdge(LibTessDotNet.IPool,LibTessDotNet.MeshUtils.Edge)">
            <summary>
            KillEdge( eDel ) destroys an edge (the half-edges eDel and eDel->Sym),
            and removes from the global edge list.
            </summary>
        </member>
        <member name="M:LibTessDotNet.MeshUtils.KillVertex(LibTessDotNet.IPool,LibTessDotNet.MeshUtils.Vertex,LibTessDotNet.MeshUtils.Vertex)">
            <summary>
            KillVertex( vDel ) destroys a vertex and removes it from the global
            vertex list. It updates the vertex loop to point to a given new vertex.
            </summary>
        </member>
        <member name="M:LibTessDotNet.MeshUtils.KillFace(LibTessDotNet.IPool,LibTessDotNet.MeshUtils.Face,LibTessDotNet.MeshUtils.Face)">
            <summary>
            KillFace( fDel ) destroys a face and removes it from the global face
            list. It updates the face loop to point to a given new face.
            </summary>
        </member>
        <member name="M:LibTessDotNet.MeshUtils.FaceArea(LibTessDotNet.MeshUtils.Face)">
            <summary>
            Return signed area of face.
            </summary>
        </member>
        <member name="T:LibTessDotNet.Tess">
            <summary>
            Tessellator, the main class to use
            </summary>
            <example>
            // See TessExample/Program.cs for a full example.
            
            // Create a new Tess instance:
            var tess = new Tess();
            
            // Add a contour:
            tess.AddContour(contour);
            
            // Tessellate!
            tess.Tessellate();
            
            // Use the tessellated mesh:
            Vec3 v0 = tess.Vertices[tess.Elements[0]].Position;
            Vec3 v1 = tess.Vertices[tess.Elements[1]].Position;
            Vec3 v2 = tess.Vertices[tess.Elements[2]].Position;
            Console.WriteLine("Triangle: ({0}) ({1}) ({2})", v0, v1, v2);
            </example>
        </member>
        <member name="M:LibTessDotNet.Tess.EdgeLeq(LibTessDotNet.Tess.ActiveRegion,LibTessDotNet.Tess.ActiveRegion)">
            <summary>
            Both edges must be directed from right to left (this is the canonical
            direction for the upper edge of each region).
            
            The strategy is to evaluate a "t" value for each edge at the
            current sweep line position, given by tess->event. The calculations
            are designed to be very stable, but of course they are not perfect.
            
            Special case: if both edge destinations are at the sweep event,
            we sort the edges by slope (they would otherwise compare equally).
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.FixUpperEdge(LibTessDotNet.Tess.ActiveRegion,LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Replace an upper edge which needs fixing (see ConnectRightVertex).
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.AddRegionBelow(LibTessDotNet.Tess.ActiveRegion,LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Add a new active region to the sweep line, *somewhere* below "regAbove"
            (according to where the new edge belongs in the sweep-line dictionary).
            The upper edge of the new region will be "eNewUp".
            Winding number and "inside" flag are not updated.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.FinishRegion(LibTessDotNet.Tess.ActiveRegion)">
            <summary>
            Delete a region from the sweep line. This happens when the upper
            and lower chains of a region meet (at a vertex on the sweep line).
            The "inside" flag is copied to the appropriate mesh face (we could
            not do this before -- since the structure of the mesh is always
            changing, this face may not have even existed until now).
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.FinishLeftRegions(LibTessDotNet.Tess.ActiveRegion,LibTessDotNet.Tess.ActiveRegion)">
            <summary>
            We are given a vertex with one or more left-going edges.  All affected
            edges should be in the edge dictionary.  Starting at regFirst->eUp,
            we walk down deleting all regions where both edges have the same
            origin vOrg.  At the same time we copy the "inside" flag from the
            active region to the face, since at this point each face will belong
            to at most one region (this was not necessarily true until this point
            in the sweep).  The walk stops at the region above regLast; if regLast
            is null we walk as far as possible.  At the same time we relink the
            mesh if necessary, so that the ordering of edges around vOrg is the
            same as in the dictionary.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.AddRightEdges(LibTessDotNet.Tess.ActiveRegion,LibTessDotNet.MeshUtils.Edge,LibTessDotNet.MeshUtils.Edge,LibTessDotNet.MeshUtils.Edge,System.Boolean)">
            <summary>
            Purpose: insert right-going edges into the edge dictionary, and update
            winding numbers and mesh connectivity appropriately.  All right-going
            edges share a common origin vOrg.  Edges are inserted CCW starting at
            eFirst; the last edge inserted is eLast.Oprev.  If vOrg has any
            left-going edges already processed, then eTopLeft must be the edge
            such that an imaginary upward vertical segment from vOrg would be
            contained between eTopLeft.Oprev and eTopLeft; otherwise eTopLeft
            should be null.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.SpliceMergeVertices(LibTessDotNet.MeshUtils.Edge,LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Two vertices with identical coordinates are combined into one.
            e1.Org is kept, while e2.Org is discarded.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.VertexWeights(LibTessDotNet.MeshUtils.Vertex,LibTessDotNet.MeshUtils.Vertex,LibTessDotNet.MeshUtils.Vertex,System.Single@,System.Single@)">
            <summary>
            Find some weights which describe how the intersection vertex is
            a linear combination of "org" and "dest".  Each of the two edges
            which generated "isect" is allocated 50% of the weight; each edge
            splits the weight between its org and dst according to the
            relative distance to "isect".
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.GetIntersectData(LibTessDotNet.MeshUtils.Vertex,LibTessDotNet.MeshUtils.Vertex,LibTessDotNet.MeshUtils.Vertex,LibTessDotNet.MeshUtils.Vertex,LibTessDotNet.MeshUtils.Vertex)">
            <summary>
            We've computed a new intersection point, now we need a "data" pointer
            from the user so that we can refer to this new vertex in the
            rendering callbacks.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.CheckForRightSplice(LibTessDotNet.Tess.ActiveRegion)">
            <summary>
            Check the upper and lower edge of "regUp", to make sure that the
            eUp->Org is above eLo, or eLo->Org is below eUp (depending on which
            origin is leftmost).
            
            The main purpose is to splice right-going edges with the same
            dest vertex and nearly identical slopes (ie. we can't distinguish
            the slopes numerically).  However the splicing can also help us
            to recover from numerical errors.  For example, suppose at one
            point we checked eUp and eLo, and decided that eUp->Org is barely
            above eLo.  Then later, we split eLo into two edges (eg. from
            a splice operation like this one).  This can change the result of
            our test so that now eUp->Org is incident to eLo, or barely below it.
            We must correct this condition to maintain the dictionary invariants.
            
            One possibility is to check these edges for intersection again
            (ie. CheckForIntersect).  This is what we do if possible.  However
            CheckForIntersect requires that tess->event lies between eUp and eLo,
            so that it has something to fall back on when the intersection
            calculation gives us an unusable answer.  So, for those cases where
            we can't check for intersection, this routine fixes the problem
            by just splicing the offending vertex into the other edge.
            This is a guaranteed solution, no matter how degenerate things get.
            Basically this is a combinatorial solution to a numerical problem.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.CheckForLeftSplice(LibTessDotNet.Tess.ActiveRegion)">
            <summary>
            Check the upper and lower edge of "regUp", to make sure that the
            eUp->Dst is above eLo, or eLo->Dst is below eUp (depending on which
            destination is rightmost).
            
            Theoretically, this should always be true.  However, splitting an edge
            into two pieces can change the results of previous tests.  For example,
            suppose at one point we checked eUp and eLo, and decided that eUp->Dst
            is barely above eLo.  Then later, we split eLo into two edges (eg. from
            a splice operation like this one).  This can change the result of
            the test so that now eUp->Dst is incident to eLo, or barely below it.
            We must correct this condition to maintain the dictionary invariants
            (otherwise new edges might get inserted in the wrong place in the
            dictionary, and bad stuff will happen).
            
            We fix the problem by just splicing the offending vertex into the
            other edge.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.CheckForIntersect(LibTessDotNet.Tess.ActiveRegion)">
            <summary>
            Check the upper and lower edges of the given region to see if
            they intersect.  If so, create the intersection and add it
            to the data structures.
            
            Returns TRUE if adding the new intersection resulted in a recursive
            call to AddRightEdges(); in this case all "dirty" regions have been
            checked for intersections, and possibly regUp has been deleted.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.WalkDirtyRegions(LibTessDotNet.Tess.ActiveRegion)">
            <summary>
            When the upper or lower edge of any region changes, the region is
            marked "dirty".  This routine walks through all the dirty regions
            and makes sure that the dictionary invariants are satisfied
            (see the comments at the beginning of this file).  Of course
            new dirty regions can be created as we make changes to restore
            the invariants.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.ConnectRightVertex(LibTessDotNet.Tess.ActiveRegion,LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Purpose: connect a "right" vertex vEvent (one where all edges go left)
            to the unprocessed portion of the mesh.  Since there are no right-going
            edges, two regions (one above vEvent and one below) are being merged
            into one.  "regUp" is the upper of these two regions.
            
            There are two reasons for doing this (adding a right-going edge):
             - if the two regions being merged are "inside", we must add an edge
               to keep them separated (the combined region would not be monotone).
             - in any case, we must leave some record of vEvent in the dictionary,
               so that we can merge vEvent with features that we have not seen yet.
               For example, maybe there is a vertical edge which passes just to
               the right of vEvent; we would like to splice vEvent into this edge.
            
            However, we don't want to connect vEvent to just any vertex.  We don't
            want the new edge to cross any other edges; otherwise we will create
            intersection vertices even when the input data had no self-intersections.
            (This is a bad thing; if the user's input data has no intersections,
            we don't want to generate any false intersections ourselves.)
            
            Our eventual goal is to connect vEvent to the leftmost unprocessed
            vertex of the combined region (the union of regUp and regLo).
            But because of unseen vertices with all right-going edges, and also
            new vertices which may be created by edge intersections, we don't
            know where that leftmost unprocessed vertex is.  In the meantime, we
            connect vEvent to the closest vertex of either chain, and mark the region
            as "fixUpperEdge".  This flag says to delete and reconnect this edge
            to the next processed vertex on the boundary of the combined region.
            Quite possibly the vertex we connected to will turn out to be the
            closest one, in which case we won't need to make any changes.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.ConnectLeftDegenerate(LibTessDotNet.Tess.ActiveRegion,LibTessDotNet.MeshUtils.Vertex)">
            <summary>
            The event vertex lies exactly on an already-processed edge or vertex.
            Adding the new vertex involves splicing it into the already-processed
            part of the mesh.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.ConnectLeftVertex(LibTessDotNet.MeshUtils.Vertex)">
            <summary>
            Purpose: connect a "left" vertex (one where both edges go right)
            to the processed portion of the mesh.  Let R be the active region
            containing vEvent, and let U and L be the upper and lower edge
            chains of R.  There are two possibilities:
            
            - the normal case: split R into two regions, by connecting vEvent to
              the rightmost vertex of U or L lying to the left of the sweep line
            
            - the degenerate case: if vEvent is close enough to U or L, we
              merge vEvent into that edge chain.  The subcases are:
                - merging with the rightmost vertex of U or L
                - merging with the active edge of U or L
                - merging with an already-processed portion of U or L
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.SweepEvent(LibTessDotNet.MeshUtils.Vertex)">
            <summary>
            Does everything necessary when the sweep line crosses a vertex.
            Updates the mesh and the edge dictionary.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.AddSentinel(System.Single,System.Single,System.Single)">
            <summary>
            Make the sentinel coordinates big enough that they will never be
            merged with real input features.
            
            We add two sentinel edges above and below all other edges,
            to avoid special cases at the top and bottom.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.InitEdgeDict">
            <summary>
            We maintain an ordering of edge intersections with the sweep line.
            This order is maintained in a dynamic dictionary.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.RemoveDegenerateEdges">
            <summary>
            Remove zero-length edges, and contours with fewer than 3 vertices.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.InitPriorityQ">
            <summary>
            Insert all vertices into the priority queue which determines the
            order in which vertices cross the sweep line.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.RemoveDegenerateFaces">
            <summary>
            Delete any degenerate faces with only two edges.  WalkDirtyRegions()
            will catch almost all of these, but it won't catch degenerate faces
            produced by splice operations on already-processed edges.
            The two places this can happen are in FinishLeftRegions(), when
            we splice in a "temporary" edge produced by ConnectRightVertex(),
            and in CheckForLeftSplice(), where we splice already-processed
            edges to ensure that our dictionary invariants are not violated
            by numerical errors.
            
            In both these cases it is *very* dangerous to delete the offending
            edge at the time, since one of the routines further up the stack
            will sometimes be keeping a pointer to that edge.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.ComputeInterior">
            <summary>
            ComputeInterior computes the planar arrangement specified
            by the given contours, and further subdivides this arrangement
            into regions.  Each region is marked "inside" if it belongs
            to the polygon, according to the rule given by windingRule.
            Each interior region is guaranteed to be monotone.
            </summary>
        </member>
        <member name="F:LibTessDotNet.Tess.Undef">
            <summary>
            The value used to fill indices of incomplete polygons 
            and to mark boundary edges in <see cref="F:LibTessDotNet.ElementType.ConnectedPolygons"/> mode.
            </summary>
        </member>
        <member name="F:LibTessDotNet.Tess.NoEmptyPolygons">
            <summary>
            If true, will remove empty (zero area) polygons.
            </summary>
        </member>
        <member name="P:LibTessDotNet.Tess.Normal">
            <summary>
            Normal of the tessellated mesh. The normal is the main axis of sweep that has been used.
            </summary>
        </member>
        <member name="P:LibTessDotNet.Tess.Vertices">
            <summary>
            Vertices of the tessellated mesh.
            </summary>
        </member>
        <member name="P:LibTessDotNet.Tess.VertexCount">
            <summary>
            Number of vertices in the tessellated mesh.
            </summary>
        </member>
        <member name="P:LibTessDotNet.Tess.Elements">
            <summary>
            Indices of the tessellated mesh. See <see cref="T:LibTessDotNet.ElementType"/> for details on data layout.
            </summary>
        </member>
        <member name="P:LibTessDotNet.Tess.ElementCount">
            <summary>
            Number of elements in the tessellated mesh.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.TessellateMonoRegion(LibTessDotNet.MeshUtils.Face)">
            <summary>
            TessellateMonoRegion( face ) tessellates a monotone region
            (what else would it do??)  The region must consist of a single
            loop of half-edges (see mesh.h) oriented CCW.  "Monotone" in this
            case means that any vertical line intersects the interior of the
            region in a single interval.  
            
            Tessellation consists of adding interior edges (actually pairs of
            half-edges), to split the region into non-overlapping triangles.
            
            The basic idea is explained in Preparata and Shamos (which I don't
            have handy right now), although their implementation is more
            complicated than this one.  The are two edge chains, an upper chain
            and a lower chain.  We process all vertices from both chains in order,
            from right to left.
            
            The algorithm ensures that the following invariant holds after each
            vertex is processed: the untessellated region consists of two
            chains, where one chain (say the upper) is a single edge, and
            the other chain is concave.  The left vertex of the single edge
            is always to the left of all vertices in the concave chain.
            
            Each step consists of adding the rightmost unprocessed vertex to one
            of the two chains, and forming a fan of triangles from the rightmost
            of two chain endpoints.  Determining whether we can add each triangle
            to the fan is a simple orientation test.  By making the fan as large
            as possible, we restore the invariant (check it yourself).
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.TessellateInterior">
            <summary>
            TessellateInterior( mesh ) tessellates each region of
            the mesh which is marked "inside" the polygon. Each such region
            must be monotone.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.DiscardExterior">
            <summary>
            DiscardExterior zaps (ie. sets to null) all faces
            which are not marked "inside" the polygon.  Since further mesh operations
            on NULL faces are not allowed, the main purpose is to clean up the
            mesh so that exterior loops are not represented in the data structure.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.SetWindingNumber(System.Int32,System.Boolean)">
            <summary>
            SetWindingNumber( value, keepOnlyBoundary ) resets the
            winding numbers on all edges so that regions marked "inside" the
            polygon have a winding number of "value", and regions outside
            have a winding number of 0.
            
            If keepOnlyBoundary is TRUE, it also deletes all edges which do not
            separate an interior region from an exterior one.
            </summary>
        </member>
        <member name="M:LibTessDotNet.Tess.AddContour(LibTessDotNet.ContourVertex[],LibTessDotNet.ContourOrientation)">
            <summary>
            Adds a closed contour to be tessellated.
            </summary>
            <param name="vertices"> Vertices of the contour. </param>
            <param name="forceOrientation">
            Orientation of the contour.
            <see cref="F:LibTessDotNet.ContourOrientation.Original"/> keeps the orientation of the input vertices.
            <see cref="F:LibTessDotNet.ContourOrientation.Clockwise"/> and <see cref="F:LibTessDotNet.ContourOrientation.CounterClockwise"/> 
            force the vertices to have a specified orientation.
            </param>
        </member>
        <member name="M:LibTessDotNet.Tess.AddContour(System.Collections.Generic.IList{LibTessDotNet.ContourVertex},LibTessDotNet.ContourOrientation)">
            <summary>
            Adds a closed contour to be tessellated.
            </summary>
            <param name="vertices"> Vertices of the contour. </param>
            <param name="forceOrientation">
            Orientation of the contour.
            <see cref="F:LibTessDotNet.ContourOrientation.Original"/> keeps the orientation of the input vertices.
            <see cref="F:LibTessDotNet.ContourOrientation.Clockwise"/> and <see cref="F:LibTessDotNet.ContourOrientation.CounterClockwise"/> 
            force the vertices to have a specified orientation.
            </param>
        </member>
        <member name="M:LibTessDotNet.Tess.Tessellate(LibTessDotNet.WindingRule,LibTessDotNet.ElementType,System.Int32,LibTessDotNet.CombineCallback,LibTessDotNet.Vec3)">
            <summary>
            Tessellates the input contours.
            </summary>
            <param name="windingRule"> Winding rule used for tessellation. See <see cref="T:LibTessDotNet.WindingRule"/> for details. </param>
            <param name="elementType"> Tessellation output type. See <see cref="T:LibTessDotNet.ElementType"/> for details. </param>
            <param name="polySize"> Number of vertices per polygon if output is polygons. </param>
            <param name="combineCallback"> Interpolator used to determine the data payload of generated vertices. </param>
            <param name="normal"> Normal of the input contours. If set to zero, the normal will be calculated during tessellation. </param>
        </member>
        <member name="T:LibTessDotNet.WindingRule">
            <summary>
            The winding rule determines how the different contours are combined together.
            See OpenGL Programming Guide (section "Winding Numbers and Winding Rules") for description of the winding rules.
            http://www.glprogramming.com/red/chapter11.html
            </summary>
        </member>
        <member name="T:LibTessDotNet.ElementType">
            <summary>
            The element type determines the contents of <see cref="P:LibTessDotNet.Tess.Elements"/>.
            </summary>
        </member>
        <member name="F:LibTessDotNet.ElementType.Polygons">
            <summary>
            Each element in <see cref="P:LibTessDotNet.Tess.Elements"/> is a polygon defined as 'polySize' number of vertex indices.
            If a polygon has less than 'polySize' vertices, the remaining indices are stored as <see cref="F:LibTessDotNet.Tess.Undef"/>.
            </summary>
        </member>
        <member name="F:LibTessDotNet.ElementType.ConnectedPolygons">
            <summary>
            Each element in <see cref="P:LibTessDotNet.Tess.Elements"/> is polygon defined as 'polySize' number of vertex indices,
            followed by 'polySize' indices to neighbour polygons, that is each element is 'polySize' * 2 indices.
            If a polygon has less than 'polySize' vertices, the remaining indices are stored as <see cref="F:LibTessDotNet.Tess.Undef"/>.
            If a polygon edge is a boundary, that is, not connected to another polygon, the neighbour index is <see cref="F:LibTessDotNet.Tess.Undef"/>.
            </summary>
        </member>
        <member name="F:LibTessDotNet.ElementType.BoundaryContours">
            <summary>
            Each element in <see cref="P:LibTessDotNet.Tess.Elements"/> is [base index, count] pair defining a range of vertices for a contour.
            The first value is index to first vertex in contour and the second value is number of vertices in the contour.
            </summary>
        </member>
    </members>
</doc>
